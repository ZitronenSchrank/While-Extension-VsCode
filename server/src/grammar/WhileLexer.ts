// Generated from /home/zitrone/Documents/OwnProjects/WhileProjects/while-lsp/grammar/While.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class WhileLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly WRITE = 3;
	public static readonly READ = 4;
	public static readonly WHILE = 5;
	public static readonly SUCC = 6;
	public static readonly PRED = 7;
	public static readonly LOOP = 8;
	public static readonly DEFINE = 9;
	public static readonly VARIABLE = 10;
	public static readonly BEGIN = 11;
	public static readonly END = 12;
	public static readonly RETURN = 13;
	public static readonly COLON = 14;
	public static readonly EQUAL = 15;
	public static readonly COMMA = 16;
	public static readonly ASSIGN = 17;
	public static readonly SEMICOLON = 18;
	public static readonly MINUS = 19;
	public static readonly PLUS = 20;
	public static readonly ID = 21;
	public static readonly NUM = 22;
	public static readonly COMMENT = 23;
	public static readonly WS = 24;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "WRITE", "READ", "WHILE", "SUCC", "PRED", "LOOP", "DEFINE", 
		"VARIABLE", "BEGIN", "END", "RETURN", "COLON", "EQUAL", "COMMA", "ASSIGN", 
		"SEMICOLON", "MINUS", "PLUS", "ID", "NUM", "COMMENT", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "'write'", "'read'", "'while'", "'succ'", "'pred'", 
		"'loop'", "'def'", "'var'", "'begin'", "'end'", "'return'", "':'", "'='", 
		"','", undefined, "';'", "'-'", "'+'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "WRITE", "READ", "WHILE", "SUCC", "PRED", 
		"LOOP", "DEFINE", "VARIABLE", "BEGIN", "END", "RETURN", "COLON", "EQUAL", 
		"COMMA", "ASSIGN", "SEMICOLON", "MINUS", "PLUS", "ID", "NUM", "COMMENT", 
		"WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(WhileLexer._LITERAL_NAMES, WhileLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return WhileLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(WhileLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "While.g4"; }

	// @Override
	public get ruleNames(): string[] { return WhileLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return WhileLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return WhileLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return WhileLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1A\xA2\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03" +
		"\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03" +
		"\x15\x03\x15\x03\x16\x03\x16\x07\x16\x82\n\x16\f\x16\x0E\x16\x85\v\x16" +
		"\x03\x17\x03\x17\x03\x17\x07\x17\x8A\n\x17\f\x17\x0E\x17\x8D\v\x17\x05" +
		"\x17\x8F\n\x17\x03\x18\x03\x18\x03\x18\x03\x18\x07\x18\x95\n\x18\f\x18" +
		"\x0E\x18\x98\v\x18\x03\x18\x03\x18\x03\x19\x06\x19\x9D\n\x19\r\x19\x0E" +
		"\x19\x9E\x03\x19\x03\x19\x02\x02\x02\x1A\x03\x02\x03\x05\x02\x04\x07\x02" +
		"\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02" +
		"\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12" +
		"#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02" +
		"\x1A\x03\x02\b\x05\x02C\\aac|\x07\x02//2;C\\aac|\x03\x023;\x03\x022;\x04" +
		"\x02\f\f\x0F\x0F\x05\x02\v\f\x0F\x0F\"\"\x02\xA6\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02" +
		"\x02\x021\x03\x02\x02\x02\x033\x03\x02\x02\x02\x055\x03\x02\x02\x02\x07" +
		"7\x03\x02\x02\x02\t=\x03\x02\x02\x02\vB\x03\x02\x02\x02\rH\x03\x02\x02" +
		"\x02\x0FM\x03\x02\x02\x02\x11R\x03\x02\x02\x02\x13W\x03\x02\x02\x02\x15" +
		"[\x03\x02\x02\x02\x17_\x03\x02\x02\x02\x19e\x03\x02\x02\x02\x1Bi\x03\x02" +
		"\x02\x02\x1Dp\x03\x02\x02\x02\x1Fr\x03\x02\x02\x02!t\x03\x02\x02\x02#" +
		"v\x03\x02\x02\x02%y\x03\x02\x02\x02\'{\x03\x02\x02\x02)}\x03\x02\x02\x02" +
		"+\x7F\x03\x02\x02\x02-\x8E\x03\x02\x02\x02/\x90\x03\x02\x02\x021\x9C\x03" +
		"\x02\x02\x0234\x07*\x02\x024\x04\x03\x02\x02\x0256\x07+\x02\x026\x06\x03" +
		"\x02\x02\x0278\x07y\x02\x0289\x07t\x02\x029:\x07k\x02\x02:;\x07v\x02\x02" +
		";<\x07g\x02\x02<\b\x03\x02\x02\x02=>\x07t\x02\x02>?\x07g\x02\x02?@\x07" +
		"c\x02\x02@A\x07f\x02\x02A\n\x03\x02\x02\x02BC\x07y\x02\x02CD\x07j\x02" +
		"\x02DE\x07k\x02\x02EF\x07n\x02\x02FG\x07g\x02\x02G\f\x03\x02\x02\x02H" +
		"I\x07u\x02\x02IJ\x07w\x02\x02JK\x07e\x02\x02KL\x07e\x02\x02L\x0E\x03\x02" +
		"\x02\x02MN\x07r\x02\x02NO\x07t\x02\x02OP\x07g\x02\x02PQ\x07f\x02\x02Q" +
		"\x10\x03\x02\x02\x02RS\x07n\x02\x02ST\x07q\x02\x02TU\x07q\x02\x02UV\x07" +
		"r\x02\x02V\x12\x03\x02\x02\x02WX\x07f\x02\x02XY\x07g\x02\x02YZ\x07h\x02" +
		"\x02Z\x14\x03\x02\x02\x02[\\\x07x\x02\x02\\]\x07c\x02\x02]^\x07t\x02\x02" +
		"^\x16\x03\x02\x02\x02_`\x07d\x02\x02`a\x07g\x02\x02ab\x07i\x02\x02bc\x07" +
		"k\x02\x02cd\x07p\x02\x02d\x18\x03\x02\x02\x02ef\x07g\x02\x02fg\x07p\x02" +
		"\x02gh\x07f\x02\x02h\x1A\x03\x02\x02\x02ij\x07t\x02\x02jk\x07g\x02\x02" +
		"kl\x07v\x02\x02lm\x07w\x02\x02mn\x07t\x02\x02no\x07p\x02\x02o\x1C\x03" +
		"\x02\x02\x02pq\x07<\x02\x02q\x1E\x03\x02\x02\x02rs\x07?\x02\x02s \x03" +
		"\x02\x02\x02tu\x07.\x02\x02u\"\x03\x02\x02\x02vw\x05\x1D\x0F\x02wx\x05" +
		"\x1F\x10\x02x$\x03\x02\x02\x02yz\x07=\x02\x02z&\x03\x02\x02\x02{|\x07" +
		"/\x02\x02|(\x03\x02\x02\x02}~\x07-\x02\x02~*\x03\x02\x02\x02\x7F\x83\t" +
		"\x02\x02\x02\x80\x82\t\x03\x02\x02\x81\x80\x03\x02\x02\x02\x82\x85\x03" +
		"\x02\x02\x02\x83\x81\x03\x02\x02\x02\x83\x84\x03\x02\x02\x02\x84,\x03" +
		"\x02\x02\x02\x85\x83\x03\x02\x02\x02\x86\x8F\x072\x02\x02\x87\x8B\t\x04" +
		"\x02\x02\x88\x8A\t\x05\x02\x02\x89\x88\x03\x02\x02\x02\x8A\x8D\x03\x02" +
		"\x02\x02\x8B\x89\x03\x02\x02\x02\x8B\x8C\x03\x02\x02\x02\x8C\x8F\x03\x02" +
		"\x02\x02\x8D\x8B\x03\x02\x02\x02\x8E\x86\x03\x02\x02\x02\x8E\x87\x03\x02" +
		"\x02\x02\x8F.\x03\x02\x02\x02\x90\x91\x071\x02\x02\x91\x92\x071\x02\x02" +
		"\x92\x96\x03\x02\x02\x02\x93\x95\n\x06\x02\x02\x94\x93\x03\x02\x02\x02" +
		"\x95\x98\x03\x02\x02\x02\x96\x94\x03\x02\x02\x02\x96\x97\x03\x02\x02\x02" +
		"\x97\x99\x03\x02\x02\x02\x98\x96\x03\x02\x02\x02\x99\x9A\b\x18\x02\x02" +
		"\x9A0\x03\x02\x02\x02\x9B\x9D\t\x07\x02\x02\x9C\x9B\x03\x02\x02\x02\x9D" +
		"\x9E\x03\x02\x02\x02\x9E\x9C\x03\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F" +
		"\xA0\x03\x02\x02\x02\xA0\xA1\b\x19\x02\x02\xA12\x03\x02\x02\x02\t\x02" +
		"\x83\x8B\x8E\x96\x9C\x9E\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!WhileLexer.__ATN) {
			WhileLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(WhileLexer._serializedATN));
		}

		return WhileLexer.__ATN;
	}

}

